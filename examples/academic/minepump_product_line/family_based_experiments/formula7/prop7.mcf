%% The controller can always eventually receive/read a message, i.e. it can return to its 
%% initial state from any state
%%
%% Holds for all product families. Requires no decomposition to prove this.


forall Pz:FExpr.
( val(Pz in
[
and(atom(Mq),and(atom(Ma),and(atom(Cp),atom(Ct))))
,and(neg(atom(Mq)),and(atom(Ma),and(atom(Cp),atom(Ct))))
,and(atom(Mq),and(neg(atom(Ma)),and(atom(Cp),atom(Ct))))
,and(neg(atom(Mq)),and(neg(atom(Ma)),and(atom(Cp),atom(Ct))))
,and(atom(Mq),and(atom(Ma),and(neg(atom(Cp)),atom(Ct))))
,and(neg(atom(Mq)),and(atom(Ma),and(neg(atom(Cp)),atom(Ct))))
,and(atom(Mq),and(neg(atom(Ma)),and(neg(atom(Cp)),atom(Ct))))
,and(neg(atom(Mq)),and(neg(atom(Ma)),and(neg(atom(Cp)),atom(Ct))))
,and(atom(Ma),and(atom(Cp),neg(atom(Ct))))
,and(neg(atom(Ma)),and(atom(Cp),neg(atom(Ct))))
,and(atom(Ma),and(neg(atom(Cp)),neg(atom(Ct))))
,and(neg(atom(Ma)),and(neg(atom(Cp)),neg(atom(Ct))))
]
)
 =>
( nu X(Px:FExpr = normalise(and(Pz,FD))).
 (
 (val(normalise(and(Px,tt)) != ff) => (forall e:FExpr. [skip(e)](val(normalise(and(Px,e)) != ff) => X(normalise(and(Px,e)))) ))
 &&
 ([skip]X(Px))
 &&
 ([receiveMsg]X(Px))
 &&
 (mu Y(Py:FExpr = Px).
   (
    (val(normalise(or(neg(Py),tt)) == tt) && (exists e:FExpr. <skip(e)>(val(normalise(or(neg(Py),e)) == tt) && Y(Py))))
  ||(val(normalise(or(neg(Py),tt)) == tt) && <skip>(Y(Py)))
  ||(val(normalise(or(neg(Py),tt)) == tt) && <receiveMsg>true)
   )
 )
)
)
)
